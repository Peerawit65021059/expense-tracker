name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan every Monday at 6 AM UTC
    - cron: '0 6 * * 1'

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: '18'

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (Frontend)
        working-directory: expense-tracker
        run: npm ci

      - name: Install dependencies (Backend)
        working-directory: functions
        run: npm ci

      - name: Run npm audit (Frontend)
        working-directory: expense-tracker
        run: |
          npm audit --audit-level moderate --json > audit-frontend.json || true
          cat audit-frontend.json

      - name: Run npm audit (Backend)
        working-directory: functions
        run: |
          npm audit --audit-level moderate --json > audit-backend.json || true
          cat audit-backend.json

      - name: Check for security vulnerabilities
        run: |
          # Check frontend vulnerabilities
          if [ -f "expense-tracker/audit-frontend.json" ]; then
            VULN_COUNT_FRONTEND=$(jq '.metadata.vulnerabilities.total // 0' expense-tracker/audit-frontend.json)
          else
            VULN_COUNT_FRONTEND=0
          fi

          # Check backend vulnerabilities
          if [ -f "functions/audit-backend.json" ]; then
            VULN_COUNT_BACKEND=$(jq '.metadata.vulnerabilities.total // 0' functions/audit-backend.json)
          else
            VULN_COUNT_BACKEND=0
          fi

          echo "frontend_vulnerabilities=$VULN_COUNT_FRONTEND" >> $GITHUB_OUTPUT
          echo "backend_vulnerabilities=$VULN_COUNT_BACKEND" >> $GITHUB_OUTPUT

          TOTAL_VULN=$((VULN_COUNT_FRONTEND + VULN_COUNT_BACKEND))
          echo "total_vulnerabilities=$TOTAL_VULN" >> $GITHUB_OUTPUT

          # Determine severity
          if [ $TOTAL_VULN -gt 10 ]; then
            echo "severity=critical" >> $GITHUB_OUTPUT
          elif [ $TOTAL_VULN -gt 5 ]; then
            echo "severity=high" >> $GITHUB_OUTPUT
          elif [ $TOTAL_VULN -gt 0 ]; then
            echo "severity=medium" >> $GITHUB_OUTPUT
          else
            echo "severity=low" >> $GITHUB_OUTPUT
          fi

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Check for exposed secrets
        run: |
          # Check for API keys and secrets in code
          echo "üîç Scanning for exposed secrets..."

          # Check for Firebase config in source files
          if grep -r "FIREBASE_API_KEY\|FIREBASE_PROJECT_ID" expense-tracker/src/ --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx"; then
            echo "‚ö†Ô∏è  Potential exposed Firebase config found in source files"
            echo "exposed_config=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ No exposed Firebase config found"
            echo "exposed_config=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate security report
        run: |
          echo "## üîí Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "### üìä Vulnerability Summary" >> security-report.md
          echo "- **Frontend Vulnerabilities:** ${{ steps.check-vulnerabilities.outputs.frontend_vulnerabilities }}" >> security-report.md
          echo "- **Backend Vulnerabilities:** ${{ steps.check-vulnerabilities.outputs.backend_vulnerabilities }}" >> security-report.md
          echo "- **Total Vulnerabilities:** ${{ steps.check-vulnerabilities.outputs.total_vulnerabilities }}" >> security-report.md
          echo "- **Severity Level:** ${{ steps.check-vulnerabilities.outputs.severity }}" >> security-report.md
          echo "" >> security-report.md
          echo "### üîç Security Checks" >> security-report.md
          echo "- **CodeQL Analysis:** ‚úÖ Completed" >> security-report.md
          echo "- **Secret Exposure:** ${{ steps.check-secrets.outputs.exposed_config == 'true' && '‚ö†Ô∏è Found' || '‚úÖ None' }}" >> security-report.md
          echo "- **Dependency Audit:** ‚úÖ Completed" >> security-report.md
          echo "" >> security-report.md
          echo "### üõ°Ô∏è Recommendations" >> security-report.md

          if [ "${{ steps.check-vulnerabilities.outputs.total_vulnerabilities }}" -gt 0 ]; then
            echo "- ‚ö†Ô∏è  Review and fix security vulnerabilities" >> security-report.md
            echo "- üîÑ Update dependencies to latest secure versions" >> security-report.md
          else
            echo "- ‚úÖ All dependencies are secure" >> security-report.md
          fi

          if [ "${{ steps.check-secrets.outputs.exposed_config }}" == "true" ]; then
            echo "- üö® Remove exposed secrets from source code" >> security-report.md
            echo "- üîê Use environment variables for sensitive data" >> security-report.md
          fi

          echo "" >> security-report.md
          echo "### üìà Scan Details" >> security-report.md
          echo "- **Scan Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
          echo "- **Commit:** ${{ github.sha }}" >> security-report.md
          echo "- **Branch:** ${{ github.ref_name }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: |
            security-report.md
            expense-tracker/audit-frontend.json
            functions/audit-backend.json
          retention-days: 30

      - name: Comment security results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const securityReport = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: securityReport
            });

      - name: Fail on critical vulnerabilities
        if: steps.check-vulnerabilities.outputs.severity == 'critical'
        run: |
          echo "üö® Critical security vulnerabilities found!"
          echo "Please review and fix the security issues before proceeding."
          exit 1

      - name: Warn on high vulnerabilities
        if: steps.check-vulnerabilities.outputs.severity == 'high'
        run: |
          echo "‚ö†Ô∏è  High severity security vulnerabilities found."
          echo "Consider fixing these issues as soon as possible."