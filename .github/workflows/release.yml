name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Get release notes
        id: release-notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^ 2>/dev/null || echo "")

          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

          # Generate release notes
          if [ -n "$PREVIOUS_TAG" ]; then
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            RELEASE_NOTES=$(git log --pretty=format:"* %s (%h)" --oneline | head -20)
          fi

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "## 🚀 Release Notes" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📦 Build Information" >> $GITHUB_OUTPUT
          echo "- **Version:** $LATEST_TAG" >> $GITHUB_OUTPUT
          echo "- **Build Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build application
        working-directory: expense-tracker
        run: |
          npm ci
          npm run build

      - name: Create release archives
        run: |
          # Create source archive
          tar -czf expense-tracker-source.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='expense-tracker/build' \
            .

          # Create build archive
          cd expense-tracker
          tar -czf ../expense-tracker-build.tar.gz build/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}

      - name: Upload source code
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./expense-tracker-source.tar.gz
          asset_name: expense-tracker-${{ github.ref_name }}-source.tar.gz
          asset_content_type: application/gzip

      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./expense-tracker-build.tar.gz
          asset_name: expense-tracker-${{ github.ref_name }}-build.tar.gz
          asset_content_type: application/gzip

      - name: Deploy to production
        run: |
          npm install -g firebase-tools
          firebase use expense-wallet-82d9f
          firebase deploy --only hosting,functions --project expense-wallet-82d9f
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Create deployment announcement
        uses: actions/github-script@v7
        with:
          script: |
            const releaseNotes = `${{ steps.release-notes.outputs.release_notes }}`;

            const announcement = `## 🎉 New Release: ${{ github.ref_name }}

${releaseNotes}

### 🚀 Deployment Status
✅ **Successfully deployed to production**
🔗 **Live URL:** https://expense-wallet-82d9f.web.app

### 📋 What's New
- All changes from this release are now live
- Database migrations completed
- CDN cache invalidated

### 🐛 Known Issues
*None reported*

### 📞 Support
If you encounter any issues, please create an issue on GitHub.

---
🤖 *This announcement was automatically generated by the release workflow.*`;

            // Create announcement issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🎉 Release ${{ github.ref_name }} - Deployed to Production`,
              body: announcement,
              labels: ['release', 'announcement']
            });

            // Pin the announcement (requires admin permissions)
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.data.number,
                state: 'open'
              });
            } catch (error) {
              console.log('Could not pin announcement:', error.message);
            }

  cleanup:
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Clean up temporary files
        run: |
          rm -f expense-tracker-source.tar.gz expense-tracker-build.tar.gz